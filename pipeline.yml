---
resources:
    - name: source-code
      type: git
      source:
          uri: https://github.com/spring-projects/spring-petclinic.git
          branch: master

    - name: compiled-jar
      type: s3
      source:
          regexp: ((team))/packages/spring-petclinic-(.*).jar
          bucket: ((s3_bucket))
          endpoint: ((s3_endpoint))
          disable_ssl: ((s3_disable_ssl))
          access_key_id: ((s3_access_key_id))
          secret_access_key: ((s3_secret_access_key))

    - name: version
      type: semver
      source:
          driver: s3
          key: ((team))/release-version
          bucket: ((s3_bucket))
          endpoint: ((s3_endpoint))
          disable_ssl: ((s3_disable_ssl))
          access_key_id: ((s3_access_key_id))
          secret_access_key: ((s3_secret_access_key))

jobs:
    - name: build
      serial: true
      plan:
          - get: source-code
          - get: version
            params:
                pre: alpha
          - task: compile
            config:
                platform: linux
                image_resource:
                    type: docker-image
                    source:
                        repository: openjdk
                        tag: 8-jdk-slim
                inputs:
                    - name: source-code
                    - name: version
                run:
                    path: /bin/sh
                    args:
                        - -c
                        - |
                            set -eu
                            cd source-code
                            ./mvnw -q versions:set -DnewVersion=$(cat ../version/version)
                            ./mvnw -q package

                            cd ..

                            cp source-code/target/*.jar release-jar/
                outputs:
                    - name: release-jar
          - put: version
            params:
                file: version/version
          - put: compiled-jar
            params:
                file: release-jar/*.jar

    - name: deploy
      serial: true
      plan:
          - aggregate:
                - get: compiled-jar
                  passed: [build]
                  trigger: true
                - get: source-code
                  passed: [build]
          - task: push-to-staging
            config:
                platform: linux
                image_resource:
                    type: docker-image
                    source:
                        repository: governmentpaas/cf-cli
                inputs:
                    - name: compiled-jar
                params:
                    CF_API: ((cf_api))
                    CF_USERNAME: ((cf_user))
                    CF_PASSWORD: ((cf_password))
                    CF_SPACE: ((cf_staging_space))
                    CF_ORG: ((cf_org))
                    APP_NAME: petclinic-((cf_staging_space))-((team))
                run:
                    path: /bin/sh
                    args:
                        - -c
                        - |
                            set -eu
                            cf api $CF_API --skip-ssl-validation
                            cf auth $CF_USERNAME $CF_PASSWORD
                            cf target -o $CF_ORG -s $CF_SPACE
                            cf push $APP_NAME -p compiled-jar/*.jar
          - task: smoke-test
            config:
                platform: linux
                image_resource:
                    type: docker-image
                    source:
                        repository: governmentpaas/cf-cli
                inputs:
                    - name: compiled-jar
                run:
                    path: curl
                    args:
                        - -f
                        - http://petclinic-((cf_staging_space))-((team)).((cf_app_domain))

    - name: test
      serial: true
      plan:
          - aggregate:
                - get: source-code
                  passed: [deploy]
                - get: compiled-jar
                  passed: [deploy]
                  trigger: true
          - task: run-test
            config:
                platform: linux
                image_resource:
                    type: docker-image
                    source:
                        repository: justb4/jmeter
                inputs:
                    - name: source-code
                params:
                    PETCLINIC_HOST: http://petclinic-((cf_staging_space))-((team)).((cf_app_domain))
                    PETCLINIC_PORT: 80
                run:
                    path: /bin/sh
                    args:
                        - -c
                        - |
                            set -eu
                            jmeter -n -t source-code/src/test/jmeter/petclinic_test_plan.jmx -l ./log.jtl
